#!/usr/bin/env ruby

# Replaces UTF chars and prints SBL files in a more readable way:
# $ bin/sbl_to_utf ../snowball/algorithms/russian.sbl

# Converts Latin chars into Unicode letters:
#
#     define perfective_gerund as (
#         [substring] among (
#             '{v}'
#             '{v}{sh}{i}'
#             '{v}{sh}{i}{s}{'}'
#             ...
# =>
#     define perfective_gerund as (
#         [substring] among (
#             'в'
#             'вши'
#             'вшись'
#             ...

def build_chars_map(sbl_file)
  chars_hash = {}
  exceptions = ["'"] # apostrophe

  File.readlines(sbl_file).each do |line|
    char = line.match(/stringdef\s+(\S+)\s+'\{U\+(\S+)\}'/) # E.g.: stringdef zh    '{U+0436}'
    next if char.nil?

    latin = char[1]
    utf = '' << char[2].to_i(16)
    next unless exceptions.index(utf).nil?

    chars_hash[latin] = utf # extracts { 'zh': '0436' } => { 'zh': 'ж' }
  end

  chars_hash
end

def readable_sbl_file(sbl_file, chars_map)
  File.readlines(sbl_file).map do |line|
    readable_line = line
    chars_map.each do |latin_letter, real_letter|
      readable_line = readable_line.gsub("{#{latin_letter}}", real_letter)
    end
    readable_line
  end.join
end

sbl_file = ARGV.first.to_s

puts("Run script with sbl file, e.g.: 'bin/sbl_to_utf ../snowball/algorithms/russian.sbl'") and exit if sbl_file.empty?

puts("File '#{sbl_file}' doesn't exist") and exit unless File.exist?(sbl_file)

chars_map = build_chars_map(sbl_file)
puts readable_sbl_file(sbl_file, chars_map)
