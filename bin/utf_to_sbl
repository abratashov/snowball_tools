#!/usr/bin/env ruby

# Replaces Latin chars and prints SBL file:
# $ bin/utf_to_sbl ./algorithms/ukrainian/ukrainian.sbl.utf

# Converts Unicode chars into Latin letters:
#
#     define perfective_gerund as (
#         [substring] among (
#             'вши'
#             'вшись'
#             ...
# =>
#     define perfective_gerund as (
#         [substring] among (
#             '{v}{sh}{i}'
#             '{v}{sh}{i}{s}{'}'
#             ...


def build_chars_map(utf_file)
  chars_hash = {}
  exceptions = ["'"] # apostrophe

  File.readlines(utf_file).each do |line|
    char = line.match(/stringdef\s+(\S+)\s+'\{U\+(\S+)\}'/) # E.g.: stringdef zh    '{U+0436}'
    next if char.nil?

    latin = char[1]
    utf = '' << char[2].to_i(16)
    next unless exceptions.index(utf).nil?

    chars_hash[utf] = latin # extracts { 'zh': '0436' } => { 'ж': 'zh' }
  end

  chars_hash
end

def readable_sbl_file(utf_file, chars_map)
  File.readlines(utf_file).map do |line|
    readable_line = line
    chars_map.each do |real_letter, latin_letter|
      readable_line = readable_line.gsub(real_letter, "{#{latin_letter}}")
    end
    readable_line
  end.join
end

utf_file = ARGV.first.to_s

puts("Run script with 'utf' file, e.g.: 'bin/utf_to_sbl ./algorithms/ukrainian/ukrainian.sbl.utf'") and exit if utf_file.empty?

puts("File '#{utf_file}' doesn't exist") and exit unless File.exist?(utf_file)

chars_map = build_chars_map(utf_file)
puts readable_sbl_file(utf_file, chars_map)
